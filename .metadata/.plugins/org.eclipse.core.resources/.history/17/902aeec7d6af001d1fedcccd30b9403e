#include "stm32f4xx.h"

#define TIM2_CLK_EN (1U<<0)
#define CR1_TIM2_EN (1U<<0)
#define CCER_EN_CH1 (1U<<0)
#define GPIOAEN (1U<<0)
#define PIN5 (1U<<5)

void tim2_1hz_init(){
	//Give clock
RCC->APB1ENR |= TIM2_CLK_EN;
//Set prescalar
TIM2->PSC =1600 -1 ;//16 000 000 /1 600 =10 000
		//Set ARR
TIM2->ARR = 20000-1; //10000 /10000 =1s
//clock counter
TIM2->CNT =0;
//ENable Timer

TIM2-> CR1= CR1_TIM2_EN;




}


void tim2__pa5_output_compare(){
	//Set pa5 to alternative mode then we map the alternative function

	RCC->AHB1ENR |= GPIOAEN;

	GPIOA->MODER |=(1U<<11);
	GPIOA->MODER &= ~(1U<<10);

	GPIOA->AFR[0] |= (1U<<20);
	GPIOA->AFR[0] &= ~(1U<<21);
	GPIOA->AFR[0] &= ~(1U<<22);
	GPIOA->AFR[0] &= ~(1U<<23);


	//Give clock
RCC->APB1ENR |= TIM2_CLK_EN;
//Set prescalar
TIM2->PSC =1600 -1 ;//16 000 000 /1 600 =10 000
		//Set ARR
TIM2->ARR = 20000-1; //10000 /10000 =1s
//clock counter
TIM2->CNT =0;
//ENable Timer

TIM2-> CR1= CR1_TIM2_EN;
//set ouput compare toggle mode
TIM2->CCMR1 = (1U<<4) | (1U<<5);
//Enable capture compare tim2 ch1 in copmare mode
TIM2->CCER |= CCER_EN_CH1;


}

void tim3_input_compare(){

	//Set pa6 to alternative mode then we map the alternative function
	RCC->AHB1ENR |= GPIOAEN;

		GPIOA->MODER |=(1U<<12);
		GPIOA->MODER &= ~(1U<<13);

		GPIOA->AFR[0] |= (1U<<25);
		GPIOA->AFR[0] &= ~(1U<<24);
		GPIOA->AFR[0] &= ~(1U<<26);
		GPIOA->AFR[0] &= ~(1U<<27);
//ENable clock to tim3
		RCC->APB1ENR |= (1U<<1);
		//Set psc
		TIM3->PSC = 1600 -1;
		//Here same reg is used as ouput and input check manual ccmr1 reg
		//Set ch to input mode
		TIM3->CCMR1 = (1U<<0);
		//Set ch1 to capture every rising edge
		TIM3->CCER =(1U<<0);
		//set ch1 to capture every falling edge
		//Enable TIM3

}

